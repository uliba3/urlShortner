Computers are all around us. 
 
Following the Moore's Law, computers have become unfathomably more powerful in the last 40 years which has expanded the scope of what computers are able to do. But I have always wondered despite having these powerful computers that are seemingly capable of doing everything is there something that they are not capable of.

At first glance it seems simple - your laptop cannot cook food for you, or breathe for you. But these tasks are only impossible because the computer is not provided with limbs and the ability to change the physical environment directly. A better question to ask might be can a computer answer any well-defined mathematical question. For example, can the computer give answers to ``What is 2+2?'', ``What is the biggest prime number below $10^{100}$?'', and ``Is my python program ever going to finish executing?''. As it turns out, only some these questions can be answered by the computer.

So, which questions can the computer give an answer to and why can it not give an answer to all such question? To answer this question we first need to define what a computer does. Again the answer is very simple - a computer simply computes but what does it mean to ``compute''. Mathematicians have tried to come up various ways to define what it means to compute. In mathematics every question can be rephrased to be asked as does a set $X$ with these properties contain the element $a$. This makes defining computation much easier. Computation is a model through which we can systematically find out whether an element belongs to a set.

Think of regular expressions that the command $grep$ uses in the bash. It is a way for us to define a set of strings that a particular pattern to it and if a string does match the particular pattern then it belongs to the set. This leads us to believe that a regular expression is a computer that is capable of computing. In fact, regular expressions are one of the simplest models of computation. They are simple and easy to understand but lack in power when it comes to computation. While there is a regular expression that can find whether a given string contains the word `abacus' in it, there is no regular expression that can find whether the given string contains the same number of a's and b's.

Something that is more powerful than a context-free grammar. Without going into exact details, the way these context-free grammar work is by recursively constructing words starting from a single variable that can expand into other variables or characters under specific rules. These allow you to compute a lot more than what you would be able to with just regular expressions. But context-free grammars are still not the holy grail of computation. Even though you are capable of a lot more there are still limitations.

The best model of computation that anyone has been able to come up with are Turing Machines. They are simple machines that have a predefined set of instructions and continuously change the characters on an infinitely long tape while move left or right. It feels like something so simple doesn't have the same capabilities as our computers but Turing Machines are capable of computing anything our laptops or mobile phones can.

Turing Machines being so powerful makes it very fun to do some philosophical debates or conjure some thought experiments. Consider all Turing Machines with $n$ instructions (or states) that eventually stop when starting on a tape of all zeros. What is the maximum number of steps that such a Turing Machine can take? Let's find an analogy so that it is easier to understand. The question is equivalent to asking what is the maximum number of CPU instructions can you run using $n$ character in a python code that eventually stops (i.e. no infinite loops allowed)? This question is famously know as the Busy Beaver problem and as it turns out it is a step into the fascinating world of uncomputability.

For our thought experiment lets try to prove every statement using our most powerful set of axioms the Zermeloâ€“Fraenkel set theory. The ZF set theory is the basis of most modern Mathematics but only consists of only 8 axioms. Let's use a Turing Machine to step by step list every single true statement that these axioms produce and only stop when a statement is found to be both true and false (i.e. ZF is inconsistent). A Mathematician also found such a Truing Machine with just 749 states. Now consider what if we found Busy Beaver of 749? Then we would be able to tell whether this machine halts or not (just run it for that long and if it doesn't halt, it can never halt). Assuming ZF is consistent and the machine never halts we just proved that ZF is consistent but G\"odel proved that a consistent system can never prove its own consistency. So, using ZF you could never find Busy Beaver of 749. With this one can observe that you can never find arbitrarily large Busy Beaver numbers using any axiomatic set. Basically, Busy Beavers are uncomputable.
